// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var TicketsController, ticketsapp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ticketsapp = angular.module("ticketsapp", ["ngRoute", "ngCookies"]);

  ticketsapp.service("spinner", function() {

    /*
    Service that encapsulates the functionality of the Spinner plugin.
     */
    var options;
    options = {
      lines: 11,
      length: 2,
      width: 2,
      radius: 4,
      corner: 1,
      rotate: 0,
      trail: 50,
      speed: 1.3,
      top: '15px',
      left: '111px',
      color: '#312A1E'
    };
    this.$spinner = new Spinner(options);
    return {
      spin: (function(_this) {
        return function() {
          return _this.$spinner.spin(document.querySelector('.spinner-container'));
        };
      })(this),
      stop: (function(_this) {
        return function() {
          return _this.$spinner.stop();
        };
      })(this)
    };
  });

  ticketsapp.filter("amount", function(currencies) {

    /*
    Format the input price according to the following format €0.00 EUR
    If there is no amount, then return 0.00
    
    @param input [Object] The object in format {amount: "0.00", currency: "€"}
    
    @return [String] The formatted string.
     */
    return function(input) {
      var amount, cur_code, cur_symbol;
      amount = parseFloat(input != null ? input.amount : void 0).toFixed(2);
      if (isNaN(amount)) {
        amount = "0.00";
      }
      cur_symbol = (input != null ? input.amount : void 0) > 0 ? currencies[input != null ? input.currency : void 0] : "";
      cur_code = (input != null ? input.amount : void 0) > 0 ? input != null ? input.currency : void 0 : "";
      if (input != null) {
        return cur_symbol + amount + " " + cur_code;
      }
    };
  });

  TicketsController = (function() {
    TicketsController.$inject = ["$scope", "$http", "$window", "$routeParams", "$cookies", "$location", "currencies", "settings", "spinner"];

    function TicketsController(scope, http, window, routeParams, cookies, location, currencies, settings, spinner) {
      this.scope = scope;
      this.http = http;
      this.window = window;
      this.routeParams = routeParams;
      this.cookies = cookies;
      this.location = location;
      this.currencies = currencies;
      this.settings = settings;
      this.spinner = spinner;
      this.orderMore = __bind(this.orderMore, this);
      this.pay = __bind(this.pay, this);
      this.getCountries = __bind(this.getCountries, this);
      this.confirm = __bind(this.confirm, this);
      this.toConfirm = __bind(this.toConfirm, this);
      this.completeProfile = __bind(this.completeProfile, this);
      this.thereIsPayment = __bind(this.thereIsPayment, this);
      this.thereIsTotal = __bind(this.thereIsTotal, this);
      this.isPaid = __bind(this.isPaid, this);
      this.cancel = __bind(this.cancel, this);
      this.scope.data = {};
      this.scope.data.confirming = false;
      this.scope.data.toPay = false;
      this.scope.data.paid = false;
      this.scope.data.currencies = this.currencies;
      this.scope.data.maxQuantity = [1, 2, 3, 4, 5, 6, 7, 8];
      this.scope.data.settings = this.settings;
      this.scope.data.dynamic = {
        "quantity": 0,
        "profile": {
          "first_name": "",
          "last_name": "",
          "email": "",
          "gender": "",
          "country_code": "NL",
          "date_of_birth": "",
          "address": "",
          "zipcode": "",
          "city": ""
        },
        "paymentMethod": ""
      };
      this.scope.data.total = {
        "amount": "0.00",
        "currency": "EUR"
      };
      this.scope.data.totalIncludingCosts = {
        "amount": "0.00",
        "currency": "EUR"
      };
      this.scope.$watch("data.dynamic.quantity", (function(_this) {
        return function(newValue, oldValue) {
          var total;
          if (newValue !== oldValue) {
            total = 0;
            total += parseFloat(_this.scope.data.settings.product.price.amount) * newValue;
            return _this.scope.data.total.amount = total.toFixed(2);
          }
        };
      })(this));
      this.isPaid();
      this.getCountries();
      angular.extend(this.scope, {
        toConfirm: this.toConfirm,
        confirm: this.confirm,
        pay: this.pay,
        cancel: this.cancel,
        orderMore: this.orderMore
      });
    }

    TicketsController.prototype.cancel = function() {

      /*
      Make the static fields dynamic and show the confirm button.
       */
      return this.scope.data.toPay = false;
    };

    TicketsController.prototype.isPaid = function() {

      /*
      Determine if the user has paid and the payment was successful.
      
      @return [Boolean] True if there is a successful payment, false otherwise.
       */
      if (this.routeParams["paid"] === "success" && this.cookies.paymentUrl && data.isPaid === false) {
        return data.isPaid = True;
      }
    };

    TicketsController.prototype.thereIsTotal = function() {

      /*
      Determine if there is total.
      
      @return [Boolean] True if there is total, false otherwise.
       */
      return parseFloat(this.scope.data.total.amount) > 0;
    };

    TicketsController.prototype.thereIsPayment = function() {

      /*
      Determine if a payment method has been selected.
      
      @return [Boolean] True if there is a payment method selected, false otherwise.
       */
      return this.scope.data.dynamic.paymentMethod !== "";
    };

    TicketsController.prototype.completeProfile = function() {

      /*
      Check if the profile is complete so user can confirm.
      
      @return [Boolean] true if complete, false otherwise.
       */
      var key, value, _ref;
      _ref = this.scope.data.dynamic.profile;
      for (key in _ref) {
        value = _ref[key];
        if (value === "") {
          return false;
        }
      }
      return true;
    };

    TicketsController.prototype.toConfirm = function() {

      /*
      Confirm only when there is total, the profile is completed and there
      is a payment method selected.
      
      @return [Boolean] true to confirm, false otherwise.
       */
      return this.thereIsTotal() && this.completeProfile() && this.thereIsPayment();
    };

    TicketsController.prototype.confirm = function() {

      /*
      Confirm the data with the server to receive the payment url.
       */
      this.scope.data.confirming = true;
      this.spinner.spin();
      return this.http({
        url: "http://10.0.30.198:5000/confirm",
        dataType: "json",
        method: "POST",
        data: this.scope.data.dynamic,
        headers: {
          "Content-Type": "application/json"
        }
      }).success((function(_this) {
        return function(data, status, headers, config) {
          _this.scope.data.totalCosts = data.payment.amount;
          _this.scope.data.settings.paymentUrl = data.payment.payscreen_url;
          _this.cookies.paymentUrl = data.payment.payscreen_url;
          _this.scope.data.confirming = false;
          _this.scope.data.toPay = true;
          return _this.spinner.stop();
        };
      })(this)).error((function(_this) {
        return function(data, status, headers, config) {
          _this.scope.data.confirming = false;
          return _this.spinner.stop();
        };
      })(this));
    };

    TicketsController.prototype.getCountries = function() {

      /*
      Get a list of countries from API. Cache the response.
       */
      return this.http({
        url: "http://restcountries.eu/rest/v1/all",
        dataType: "json",
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        },
        cache: true
      }).success((function(_this) {
        return function(data, status, headers, config) {
          return _this.scope.data.countries = data;
        };
      })(this));
    };

    TicketsController.prototype.pay = function() {

      /*
      Redirect to the payment url.
       */
      return this.window.location.href = this.scope.data.settings.paymentUrl;
    };

    TicketsController.prototype.orderMore = function() {

      /*
      Show again the tickets module to user.
       */
      this.scope.data.paid = false;
      delete this.cookies.paymentUrl;
      return this.location.url(this.location.path());
    };

    return TicketsController;

  })();

  ticketsapp.controller("TicketsController", TicketsController);

  ticketsapp.config(function($routeProvider) {
    return $routeProvider.when("/", {
      templateUrl: "tickets.html",
      controller: "TicketsController"
    }).otherwise({
      redirectTo: "/"
    });
  });

}).call(this);
